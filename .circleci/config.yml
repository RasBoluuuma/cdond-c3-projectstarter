version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  notify-slack:
    description: Notify Slack when a job fails.
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            pip3 install ansible
            
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        default: ${CIRCLE_WORKFLOW_ID:0:5}
        type: string  
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-<<parameters.id>>
      - run:
          name: Destroy frontend environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.id>> --recursive
            # Delete frontend stack
            aws cloudformation delete-stack --stack-name frontend-<<parameters.id>>

  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/G1bMFF6XUnNq4fe8Ey9dM5/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-slack

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify-slack

  test-frontend:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend unit tests
          command: |
            cd frontend
            npm install
            npm run test
      - store_test_results:
          path: test-results
      - notify-slack

  test-backend:
    docker: 
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:[backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Run backend unit tests
          command: |
            cd backend
            npm run test
      - store_test_results:
          path: test-results
      - notify-slack

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend packages
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - notify-slack

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend packages
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - notify-slack

  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project3=frontInfra \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project3=backInfra \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:5} \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - notify-slack

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["d9:5c:e9:3c:36:b8:8f:08:d0:dd:40:3a:9a:cb:7b:fd"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run Configure-Server Ansible play
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      - notify-slack

  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/G1bMFF6XUnNq4fe8Ey9dM5/migration_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment
      - revert-migrations
      - notify-slack

  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:5}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - destroy-environment
      - revert-migrations
      - notify-slack

  deploy-backend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          fingerprints: ["d9:5c:e9:3c:36:b8:8f:08:d0:dd:40:3a:9a:cb:7b:fd"]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations
      - notify-slack

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo API_URL: "$API_URL"
            if curl -s $API_URL/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
                exit 0
            else
                exit 1
            fi
      - destroy-environment
      - revert-migrations
      - notify-slack

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations
      - notify-slack

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:5}"
            # Fetch the stack names  
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:5}" != "${OldWorkflowID}" ]]
            then
              echo "Deleting old stack"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-${OldWorkflowID}"
            else
              echo "Stack is the latest"
            fi
      - notify-slack

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack
      - build-backend:
          context: slack
      - test-frontend:
          requires: [build-frontend]
          context: slack
      - test-backend:
          requires: [build-backend]
          context: slack
      - scan-backend:
          requires: [build-backend]
          context: slack
      - scan-frontend:
          requires: [build-frontend]
          context: slack
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-backend, scan-frontend]
          context: slack
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: slack
      - run-migrations:
          requires: [configure-infrastructure]
          context: slack 
      - deploy-frontend:       
          requires: [run-migrations]
          context: slack
      - deploy-backend:      
          requires: [run-migrations]
          context: slack
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context: slack
      - cloudfront-update:
          requires: [smoke-test]
          context: slack
      - cleanup:
          requires: [cloudfront-update]
          context: slack